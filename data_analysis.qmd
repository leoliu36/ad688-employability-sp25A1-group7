---
title: "Data Analysis"
subtitle: "Comprehensive Data Cleaning & Exploratory Analysis of Job Market Trends"
execute:
  kernel: ad688-venv
bibliography: references.bib
csl: csl/econometrica.csl
format: 
  html:
    toc: true
    number-sections: true
    df-print: paged
---

## Overview

<!-- Brief overview of the dataset, tools used, and focus -->

## Data Cleaning Methodology

# 1. Handling of missing values 
Depending on the field type, missing values were addressed as follows: 
- Missing values in numerical fields (such as Salary and Minimum Years of Experience) are imputed with the median 
- Missing values in categorical fields (such as Industry and Company Name) are imputed with "Unknown"
- Column(s) with more than 50% missing data are removed entirely.
  
# 2. Remove Unnecessary Columns
Irrelevant or redundant columns such as outdated NAICS/SOC codes and tracking data are removed from the dataset to ensure consistency.  

# 3. Remove Duplicates 
To identify and eliminate true duplicates from the dataset, job listings that have identical values for the following fields were removed: 
  - Job Title
  - Company Name
  - Location
  - Posting Date
  - Skill requirements
  - Employment type

## Key Findings

<!-- Describe 2â€“4 major insights -->

## Visualizations

<!-- Embed figures or charts -->


```{python}
import pandas as pd

# Load lightcast_job_postings.csv 
df = pd.read_csv("data/lightcast_job_postings.csv")
df.head()
df.columns.tolist()

# Drop columns
columns_to_drop = [
  # tracking & other metadata
    "ID", "LAST_UPDATED_DATE", "LAST_UPDATED_TIMESTAMP", "DUPLICATES",
    "SOURCE_TYPES", "SOURCES", "URL", "ACTIVE_URLS", "ACTIVE_SOURCES_INFO", "MODELED_EXPIRED", "MODELED_DURATION", "TITLE_RAW", "BODY",
  # outdated NAICS and SOC codes
    "NAICS2", "NAICS2_NAME", "NAICS3", "NAICS3_NAME",
    "NAICS4", "NAICS4_NAME", "NAICS5", "NAICS5_NAME",
    "NAICS6", "NAICS6_NAME", 
    "SOC_2", "SOC_2_NAME", "SOC_3", "SOC_3_NAME",
    "SOC_4", "SOC_4_NAME", "SOC_5", "SOC_5_NAME",
    "SOC_2021_2", "SOC_2021_2_NAME", "SOC_2021_3", "SOC_2021_3_NAME",
    "SOC_2021_5", "SOC_2021_5_NAME",
    "NAICS_2022_2", "NAICS_2022_2_NAME", "NAICS_2022_3", "NAICS_2022_3_NAME",
    "NAICS_2022_4", "NAICS_2022_4_NAME", "NAICS_2022_5", "NAICS_2022_5_NAME"
]
df.drop(columns=columns_to_drop, inplace=True)
df.info()
```

```{python}
import missingno as msno
import matplotlib.pyplot as plt

# Visualize missing data using missingno heatmap
plt.figure(figsize=(12, 6))
msno.bar(df)
plt.title("Missing Data Bar Chart")
plt.tight_layout()
plt.show()

# Identify columns that have a significant amount of missing values and sort by the percentage of missing values
missing_values_pct = (df.isna().mean() * 100).sort_values(ascending=False).reset_index()
missing_values_pct.columns = ["Column", "Missing %"]
print(missing_values_pct.to_string(index=False))
```

```{python}
# Fill in missing values for SALARY, INDUSTRY, and other relevant columns
# Fill categorical columns with "Unknown"
fill_col_unk = [
    "EXPIRED", "MSA_INCOMING", "MSA_NAME_INCOMING", "MSA", "MSA_OUTGOING", "MSA_NAME", "COMPANY_RAW", "TITLE_CLEAN", "TITLE", "TITLE_NAME", "COMPANY_NAME", "COMPANY_IS_STAFFING", "EMPLOYMENT_TYPE_NAME", "REMOTE_TYPE_NAME", "EDUCATION_LEVELS_NAME", "MIN_EDULEVELS_NAME", "SKILLS_NAME", "SPECIALIZED_SKILLS_NAME", "CERTIFICATIONS_NAME", "STATE_NAME", "CITY_NAME", "COUNTY_NAME"
]
# Loop through and fill missing values
for col in fill_col_unk:
    df[col] = df[col].fillna("Unknown")

# Do the same for relevant numerical columns, but fill with median
fill_col_median = [
    "SALARY", "SALARY_FROM", "SALARY_TO", "DURATION", "MIN_YEARS_EXPERIENCE"
]
for col in fill_col_median:
    df[col] = df[col].fillna(df[col].median())

# Drop columns with >50% missing values
df.dropna(thresh=len(df) * 0.5, axis=1, inplace=True)
df.info()
```

```{python}
# Remove duplicate
df=df.drop_duplicates(subset=["TITLE_CLEAN", "COMPANY_NAME", "LOCATION", "POSTED", "EMPLOYMENT_TYPE_NAME", "REMOTE_TYPE_NAME", "SKILLS_NAME"], keep="first")

# Preview new df
df.shape
```

## 5 Exploratory Data Analysis (EDA)
This section explores job market trends through a series of visualizations. Each plot is chosen to reveal specific patterns in compensation, regional disparities, and the impact of remote work on job roles.

### 5.1 Restructuring of Compensation

#### 5.1.1 Salary by Remote Work Type

**Why this visualization was chosen:** 
To visually compare not just the average pay, but also the range and consistency of salaries across different work arrangements. This visualization could reveal that remote roles have a wider salary range, indicating that companies are paying a premium for top talent regardless of location.

```{python}
# 5.1.1 Visual - Compensation
import plotly.express as px
import pandas as pd

values_to_exclude = ['Unknown', '[None]']
df_filtered = df[~df['REMOTE_TYPE_NAME'].isin(values_to_exclude)]

fig = px.box(
    df_filtered,
    x="REMOTE_TYPE_NAME",
    y="SALARY",
    title="Salary Distribution by Work Arrangement",
    labels={"REMOTE_TYPE_NAME": "Work Arrangement", "SALARY": "Annual Salary ($)"}
)
fig.show()
```

**Key Insights:**
The median salaries across all work arrangements are similar, clustering around $115,000. However, both Remote and Hybrid Remote roles exhibit a much wider salary range and more high-paying outlier positions, with some remote roles exceeding $350,000. This suggests that while typical pay is comparable, remote-friendly positions offer significantly greater potential for top-end compensation.

#### 5.1.2 Top Skills vs. Average Salary

**Why this visualization was chosen:**
To identify which specific skills are most financially valuable in the current job market, connecting AI-related skills to compensation. This could reveal that skills related to AI/ML platforms command a significantly higher salary, even if they aren't the most frequently requested skills overall.

```{python}
# 5.1.2 Visual - Skills vs. Salary
import plotly.express as px
import ast

# This function safely converts the string of a list into an actual list
def parse_skills(skill_list_str):
    try:
        return ast.literal_eval(skill_list_str)
    except (ValueError, SyntaxError):
        return []

# Create a new column with the cleaned lists of skills
df['SKILLS_LIST'] = df['SKILLS_NAME'].apply(parse_skills)

# Create a new DataFrame where each skill gets its own row
df_skills_exploded = df.explode('SKILLS_LIST')

# --- Now, create the chart using the cleaned data ---
top_10_skills_by_count = df_skills_exploded['SKILLS_LIST'].value_counts().nlargest(10).index
df_top_skills = df_skills_exploded[df_skills_exploded['SKILLS_LIST'].isin(top_10_skills_by_count)]

avg_salary_for_top_skills = df_top_skills.groupby('SKILLS_LIST')['SALARY'].mean().reset_index()

fig = px.bar(
    avg_salary_for_top_skills,
    x='SKILLS_LIST',
    y="SALARY",
    title="Average Salary for Top 10 Skills",
    labels={'SKILLS_LIST': "Skill", "SALARY": "Average Annual Salary ($)"}
)
fig.show()
```

**Key Insights:**
Among the 10 most in-demand skills, Data Analysis commands the highest average salary at over $120,000. While compensation for most top skills is competitive, technical skills like Data Analysis and Business Process show a slight financial advantage over the lowest-paid skill in this group, Management, which averages approximately $110,000.

#### 5.1.3 Salary Distribution by Top Industries

**Why this visualization was chosen:**
After seeing which skills pay the most, it's important to see which industries offer the highest compensation. A box plot is used here to effectively compare the salary ranges and median salaries across the top 10 industries with the most job postings, helping to identify the most lucrative fields.

```{python}
# 5.1.3 Visual - Salary by Industry

# Identify the top 10 industries by job posting count
top_10_industries = df['NAICS_2022_6_NAME'].value_counts().nlargest(10).index

# Filter the DataFrame to include only jobs from these top industries
df_top_industries = df[df['NAICS_2022_6_NAME'].isin(top_10_industries)]

# Create the box plot
fig = px.box(
    df_top_industries,
    x="NAICS_2022_6_NAME",
    y="SALARY",
    title="Salary Distribution for Top 10 Industries",
    labels={"NAICS_2022_6_NAME": "Industry", "SALARY": "Annual Salary ($)"}
)

# Rotate x-axis labels for better readability
fig.update_xaxes(tickangle=45)

fig.show()
```

**Key Insights**
This chart reveals significant salary disparities between industries. Specialized fields like Custom Computer Programming Services and Offices of Certified Public Accountants offer the highest median salaries, both appearing to be above $150,000. In contrast, industries like Commercial Banking display one of the widest salary distributions, while Temporary Help Services shows one of the lowest median salaries of the top 10.


```{python}
# ----- Export All Charts -----
import plotly.express as px
import ast

# Chart 1: Salary by Remote Work Type
df_filtered = df[~df['REMOTE_TYPE_NAME'].isin(['Unknown', '[None]'])]
fig1 = px.box(
    df_filtered,
    x="REMOTE_TYPE_NAME",
    y="SALARY",
    title="Salary Distribution by Work Arrangement"
)
fig1.write_image("chart1_salary_by_work_type.png")

# Chart 2: Top Skills vs. Average Salary (Corrected)
def parse_skills(skill_list_str):
    try:
        return ast.literal_eval(skill_list_str)
    except (ValueError, SyntaxError):
        return []
df['SKILLS_LIST'] = df['SKILLS_NAME'].apply(parse_skills)
df_skills_exploded = df.explode('SKILLS_LIST')
top_10_skills_by_count = df_skills_exploded['SKILLS_LIST'].value_counts().nlargest(10).index
df_top_skills = df_skills_exploded[df_skills_exploded['SKILLS_LIST'].isin(top_10_skills_by_count)]
avg_salary_for_top_skills = df_top_skills.groupby('SKILLS_LIST')['SALARY'].mean().reset_index()
fig2 = px.bar(
    avg_salary_for_top_skills,
    x='SKILLS_LIST',
    y="SALARY",
    title="Average Salary for Top 10 Skills"
)
fig2.write_image("chart2_skills_vs_salary.png")

# Chart 3: Salary Distribution by Top Industries
top_10_industries = df['NAICS_2022_6_NAME'].value_counts().nlargest(10).index
df_top_industries = df[df['NAICS_2022_6_NAME'].isin(top_10_industries)]
fig3 = px.box(
    df_top_industries,
    x="NAICS_2022_6_NAME",
    y="SALARY",
    title="Salary Distribution for Top 10 Industries"
)
fig3.update_xaxes(tickangle=45)
fig3.write_image("chart3_salary_by_industry.png")

print("All three final charts have been saved as PNG files.")
```